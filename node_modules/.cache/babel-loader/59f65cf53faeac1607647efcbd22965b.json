{"ast":null,"code":"var _jsxFileName = \"/Users/user1/Desktop/temporary/front-end/front-end-nc-news/nc-news-app/src/Components/CommentsList.jsx\";\nimport React from 'react';\nimport { getComments, postComment, deleteComment } from '../API';\nimport CommentBox from './CommentBox';\nimport VoteUp from './VoteUp';\nimport VoteDown from './VoteDown';\n\nclass CommentsList extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      comments_list: [],\n      isLoading: true,\n      userName: 'tickle122'\n    };\n\n    this.fetchComments = () => {\n      const {\n        article_id\n      } = this.props;\n      getComments(article_id).then(comments => {\n        this.setState({\n          comments_list: comments,\n          isLoading: false\n        });\n      });\n    };\n\n    this.addComment = ({\n      inputValue\n    }) => {\n      postComment(this.props.article_id, inputValue, this.state.userName).then(comment => {\n        this.setState(currentState => {\n          const newCommentsList = [...currentState.comments_list, comment];\n          return {\n            comments_list: newCommentsList\n          };\n        });\n      });\n    };\n\n    this.removeComment = event => {\n      const comment_id = event.target.value;\n      deleteComment(comment_id).then(comment => {\n        this.setState(currentState => {\n          return {\n            comments_list: [...currentState.comments_list, comment]\n          };\n        });\n      });\n    };\n\n    this.changeVotes = event => {\n      console.log(event.target.name, event.target.value);\n    };\n  }\n\n  render() {\n    if (this.state.isLoading === true) return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \"Loading....\");\n    return React.createElement(\"main\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, React.createElement(CommentBox, {\n      article_id: this.props.article_id,\n      userName: this.state.userName,\n      addComment: this.addComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }), this.state.comments_list.map(comment => {\n      return React.createElement(\"label\", {\n        key: comment.comment_id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        key: comment.comment_id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, \"User: \", comment.author, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }), \"Comment: \", comment.body, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }), \"Votes: \", comment.votes, \" Created at: \", comment.created_at, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }), React.createElement(VoteUp, {\n        comment_id: comment.comment_id,\n        key: comment.comment_id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }), React.createElement(VoteDown, {\n        comment_id: comment.comment_id,\n        key: comment.comment_id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }), this.state.userName === comment.author ? React.createElement(\"button\", {\n        key: comment.comment_id,\n        value: comment.comment_id,\n        onClick: this.removeComment,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, \"Delete comment.\") : null, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      })));\n    }));\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.comments_list[this.state.comments_list.length - 1] === 'comment deleted') this.fetchComments();\n    if (this.state.comments_list.length !== prevState.comments_list.length) this.fetchComments();\n    if (this.props.article_id !== prevProps.article_id) this.fetchComments();\n  }\n\n  componentDidMount() {\n    this.fetchComments();\n  }\n\n}\n\nexport default CommentsList;","map":{"version":3,"sources":["/Users/user1/Desktop/temporary/front-end/front-end-nc-news/nc-news-app/src/Components/CommentsList.jsx"],"names":["React","getComments","postComment","deleteComment","CommentBox","VoteUp","VoteDown","CommentsList","Component","state","comments_list","isLoading","userName","fetchComments","article_id","props","then","comments","setState","addComment","inputValue","comment","currentState","newCommentsList","removeComment","event","comment_id","target","value","changeVotes","console","log","name","render","map","author","body","votes","created_at","componentDidUpdate","prevProps","prevState","length","componentDidMount"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { getComments, postComment, deleteComment } from '../API';\nimport CommentBox from './CommentBox';\nimport VoteUp from './VoteUp';\nimport VoteDown from './VoteDown';\n\nclass CommentsList extends React.Component {\n\tstate = {\n\t\tcomments_list: [],\n\t\tisLoading: true,\n\t\tuserName: 'tickle122'\n\t};\n\n\trender() {\n\t\tif (this.state.isLoading === true) return <p>Loading....</p>;\n\t\treturn (\n\t\t\t<main>\n\t\t\t\t<CommentBox\n\t\t\t\t\tarticle_id={this.props.article_id}\n\t\t\t\t\tuserName={this.state.userName}\n\t\t\t\t\taddComment={this.addComment}\n\t\t\t\t/>\n\t\t\t\t{this.state.comments_list.map((comment) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<label key={comment.comment_id}>\n\t\t\t\t\t\t\t<li key={comment.comment_id}>\n\t\t\t\t\t\t\t\tUser: {comment.author}\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\tComment: {comment.body}\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\tVotes: {comment.votes} Created at: {comment.created_at}\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t<VoteUp comment_id={comment.comment_id} key={comment.comment_id} />\n\t\t\t\t\t\t\t\t<VoteDown comment_id={comment.comment_id} key={comment.comment_id} />\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t{this.state.userName === comment.author ? (\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tkey={comment.comment_id}\n\t\t\t\t\t\t\t\t\t\tvalue={comment.comment_id}\n\t\t\t\t\t\t\t\t\t\tonClick={this.removeComment}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tDelete comment.\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</main>\n\t\t);\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\tif (this.state.comments_list[this.state.comments_list.length - 1] === 'comment deleted') this.fetchComments();\n\t\tif (this.state.comments_list.length !== prevState.comments_list.length) this.fetchComments();\n\t\tif (this.props.article_id !== prevProps.article_id) this.fetchComments();\n\t}\n\tcomponentDidMount() {\n\t\tthis.fetchComments();\n\t}\n\n\tfetchComments = () => {\n\t\tconst { article_id } = this.props;\n\t\tgetComments(article_id).then((comments) => {\n\t\t\tthis.setState({ comments_list: comments, isLoading: false });\n\t\t});\n\t};\n\n\taddComment = ({ inputValue }) => {\n\t\tpostComment(this.props.article_id, inputValue, this.state.userName).then((comment) => {\n\t\t\tthis.setState((currentState) => {\n\t\t\t\tconst newCommentsList = [ ...currentState.comments_list, comment ];\n\t\t\t\treturn { comments_list: newCommentsList };\n\t\t\t});\n\t\t});\n\t};\n\n\tremoveComment = (event) => {\n\t\tconst comment_id = event.target.value;\n\t\tdeleteComment(comment_id).then((comment) => {\n\t\t\tthis.setState((currentState) => {\n\t\t\t\treturn { comments_list: [ ...currentState.comments_list, comment ] };\n\t\t\t});\n\t\t});\n\t};\n\n\tchangeVotes = (event) => {\n\t\tconsole.log(event.target.name, event.target.value);\n\t};\n}\n\nexport default CommentsList;\n"]},"metadata":{},"sourceType":"module"}